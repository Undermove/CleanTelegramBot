using Application.New.Settings.Commands;
using Application.New.Users.Commands;
using Application.New.Users.Queries;
using Infrastructure.New.StateManagement.Models;
using MediatR;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Infrastructure.New.StateManagement.BotCommands;

public class StartCommand : IBotCommand
{
    private readonly IMediator _mediator;
    private readonly TelegramBotClient _client;

    public StartCommand(IMediator mediator, TelegramBotClient client)
    {
        _mediator = mediator;
        _client = client;
    }
    
    public Task<bool> IsApplicable(UserRequest request, CancellationToken cancellationToken)
    {
        var commandPayload = request.Text;
        return Task.FromResult(commandPayload.Contains(CommandNames.Start));
    }

    public async Task Execute(UserRequest request, CancellationToken token)
    {
        var user = await _mediator.Send(new GetUserByTelegramId {TelegramId = request.UserTelegramId}, token);
        if (user?.TableUrl != null)
        {
            var replyKeyboardMarkup = new ReplyKeyboardMarkup
            (
                new[]
                {
                    new KeyboardButton($"{CommandNames.GetTableIcon} –ú–æ—è —Ç–∞–±–ª–∏—Ü–∞"),
                    new KeyboardButton($"{CommandNames.SettingsIcon} –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                }
            );
            await _client.SendTextMessageAsync(
                request.UserTelegramId,
                $"{CommandNames.SettingsIcon} –¢–≤–æ—è —Ç–∞–±–ª–∏—Ü–∞:\r\n{user.TableUrl}",
                replyMarkup: replyKeyboardMarkup,
                cancellationToken: token);
            
            return;
        }

        // todo: use transaction pipeline form MediatR
        // https://medium.com/swlh/transaction-management-with-mediator-pipelines-in-asp-net-core-39317a19bb8d
        user = await _mediator.Send(new CreateUserCommand
        {
            TelegramId = request.UserTelegramId
        }, token);
        await _mediator.Send(new CreateSettingsCommand
        {
            UserId = user.UserId
        }, token);

        await _client.SendTextMessageAsync(request.UserTelegramId,
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–∫–º–µ–∫ ü•ñ" +
            "\r\n–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π." +
            "\r\n–í—Å–µ –∑–∞–ø–∏—Å–∏ —è –±—É–¥—É —Ö—Ä–∞–Ω–∏—Ç—å –≤ Google-—Ç–∞–±–ª–∏—Ü–µ." +
            "\r\n–°–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–π gmail, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –µ—ë –¥–ª—è —Ç–µ–±—è",
            cancellationToken: token);
    }
}